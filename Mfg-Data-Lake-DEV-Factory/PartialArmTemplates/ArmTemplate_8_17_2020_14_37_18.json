{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Mfg-Data-Lake-DEV-Factory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RecursiveConvertCSVToParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore3",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FolderFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FolderFilter').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowForCSVMergeToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore3",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore3",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DataFlowForCSVMergeToParquet",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowForCSVMergeToParquet",
											"type": "DataFlowReference",
											"parameters": {
												"recursiveInputPath": {
													"value": "'@{concat(pipeline().parameters.SourceFileDirectory,'/',item().name)}'",
													"type": "Expression"
												},
												"recursiveOutputPath": {
													"value": "'@{concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)}'",
													"type": "Expression"
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							]
						}
					},
					{
						"name": "FolderFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'), equals(item().name, '2020-008-01'))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "translated/csv/site/USR/FDC/Tools/ASH10653"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "translated/parquet/site/USR/FDC/Tools/ASH10653"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowForCSVMergeToParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mergedCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "translated/parquet/site/USR/FDC/Tools/ASH10653",
						"fileSystem": "adls"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_ETL_daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Databricks_ETL_ASH",
							"type": "PipelineReference"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Databricks_ETL_ETH",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-08-13T09:00:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Databricks_ETL_ETH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowForCSVMergeToParquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "mergedCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\trecursiveInputPath as string ('translated/csv/site/USR/FDC/Tools/ASH10653/2020-008-01'),\n\trecursiveOutputPath as string ('translated/parquet/site/USR/FDC/Tools/ASH10653/2020-008-01')\n}\nsource(output(\n\t\t{_c0} as short,\n\t\tFilename_Translated as string,\n\t\tFilename_Original as string,\n\t\tFabGuard_Version as string,\n\t\tRun_Path_and_Name as string,\n\t\tRecipe_Path_and_Name as string,\n\t\tSensorID as string,\n\t\tVersion as string,\n\t\tAcquired_with_Version as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Group as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Area as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_FabGuard as short,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Serial_Number as integer,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Version as string,\n\t\tSubstrate_Information_Lot_ID21 as string,\n\t\tSubstrate_Information_Cassette_ID as string,\n\t\tSubstrate_Information_Slot_ID as short,\n\t\tSubstrate_Information_Substrate_ID as string,\n\t\tSubstrate_Information_Part_ID as string,\n\t\tSubstrate_Information_Layer_ID as string,\n\t\tSubstrate_Information_Technology_ID as string,\n\t\tSubstrate_Information_Lot_ID28 as timestamp,\n\t\tSubstrate_Information_Substrate_Start_Time_GMT as timestamp,\n\t\tProcess_Information_Operator_ID as string,\n\t\tProcess_Information_Sequence_ID as string,\n\t\tProcess_Information_Recipe_ID as string,\n\t\tProcess_Information_Control_Job_ID as string,\n\t\tProcess_Information_Process_ID as string,\n\t\tExtra_Information_Extra_1_ID35 as string,\n\t\tExtra_Information_Extra_1_ID36 as string,\n\t\tExtra_Information_Extra_2_ID as string,\n\t\tExtra_Information_Extra_3_ID as string,\n\t\tExtra_Information_Extra_4_ID as string,\n\t\tExtra_Information_Extra_5_ID as string,\n\t\tExtra_Information_Extra_6_ID as string,\n\t\tExtra_Information_Extra_7_ID as string,\n\t\tExtra_Information_Extra_8_ID as string,\n\t\tGeneral_Info_Start_Time as string,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_location as timestamp,\n\t\tGeneral_Info_FabGuards_Recipe_Path_and_Name as string,\n\t\tGeneral_Info_FabGuards_Recipe_Revision as short,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_by as string,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_Time_local as timestamp,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_GMT as timestamp,\n\t\tGeneral_Info_Run_Path_and_Name as string,\n\t\tGeneral_Info_Duration_s as double,\n\t\tGeneral_Info_Number_of_Data_Points as short,\n\t\tGeneral_Info_Number_of_Scans as boolean,\n\t\tGeneral_Info_Number_of_Bins as short,\n\t\tBins as short,\n\t\tTimePoints as short,\n\t\t{Time Relative (sec)} as double,\n\t\t{Time Absolute (UTC)} as double,\n\t\t{Time Absolute (Date_Time)} as string,\n\t\tStep as boolean,\n\t\tStatus as boolean,\n\t\t{Tool:_Gas_-_CF4_Flow_(sccm);_SVID180} as boolean,\n\t\t{Tool:_Gas_-_O2_Large_Flow_(sccm);_SVID181} as short,\n\t\t{Tool:_Gas_-_NF3_Flow_(sccm);_SVID182} as boolean,\n\t\t{Tool:_Gas_-_N2H2_Flow_(sccm);_SVID183} as boolean,\n\t\t{Tool:_Gas_-_Argon_Flow_(sccm);_SVID184} as short,\n\t\t{Tool:_Pres-_Chamber_Pressure_(torr);_SVID186} as double,\n\t\t{Tool:_Temp_-_Hot_Plate_(C);_SVID187} as short,\n\t\t{Tool:_EP_-_Photo_Multiplier_Vout_(v);_SVID188} as double,\n\t\t{Tool:_RF_Bias;_SVID189} as short,\n\t\t{Tool:_RF_Match_C1_Pos_(%);_SVID190} as short,\n\t\t{Tool:_RF_Match_C2_Pos_(%);_SVID191} as short,\n\t\t{Tool:_RF_Forward_Power_(Watts);_SVID192} as short,\n\t\t{Tool:_RF_Reflected_Power_(Watts);_SVID193} as short,\n\t\t{Tool:_MW_Forward_Power_(Watts);_SVID194} as short,\n\t\t{Tool:_MW_Reflected_Power_(Watts);_SVID195} as short,\n\t\t{Tool:_Recipe_Step_Number;_SVID196_[Tool's_Step]} as short,\n\t\t{Tool:_Wafer_-_Slot_Number;_SVID222} as short,\n\t\t{Tool:_EP_-_End_Point_Time;_SVID266} as boolean,\n\t\t{Tool:_RF_Power_Set_Point_(Watts);_SVID288} as short,\n\t\t{Tool:_MW_Set_Point_(Watts);_SVID289} as short,\n\t\t{Tool:_Pres-_Chamber_Pressure_Set_Point_(torr);_SVID290} as double,\n\t\t{Tool:_Temp_-_Hot_Plate_SetPoint_(C);_SVID291} as short,\n\t\t{Tool:_Gas_-_CF4_Set_Point_(sccm);_SVID292} as boolean,\n\t\t{Tool:_Gas_-_O2_Large_Set_Point_(sccm);_SVID293} as boolean,\n\t\t{Tool:_Gas_-_NF3_Set_Point_(sccm);_SVID294} as boolean,\n\t\t{Tool:_Gas_-_N2H2_Set_Point_(sccm);_SVID295} as boolean,\n\t\t{Tool:_Gas_-_Argon_Set_Point_(sccm);_SVID296} as boolean,\n\t\t{Tool:_EP_-_Photo_Multiplier_End_Point_HiV_(v);_SVID316} as short,\n\t\t{Tool:_Pin_Height_Set_Point;_SVID317} as short,\n\t\t{Tool:_Gas_-_O2_Small_Flow} as double,\n\t\t{Tool:_Gas_-_O2_Small_Set_Point} as double,\n\t\tTool_Bin_Polling_Latency as double,\n\t\tTool_Bin_Data_Age as double,\n\t\tTool_Bin_Data_Age_SECS as double,\n\t\t{Sig:_Temp_-_Hot_Plate_-_Filtered_(No_RF)_(post_Run)} as double,\n\t\t{Sig:_Filter:_Acceptable_Data_Age} as boolean,\n\t\t{Sig:_Ash_Total_Time} as double,\n\t\t{Sig:_Overash_Time} as double,\n\t\t{Sig:_Ash_EP_Time} as double,\n\t\t{Sig:_Overash_Percentage} as double,\n\t\t{Sig:_Filter:_Max_Data_Age} as boolean,\n\t\t{Sig:_Overash_Percentage_filtered_for_Data_Age} as double,\n\t\t{Sig:_MW_-_Power_Deviation_(post_Run)} as double,\n\t\t{Sig:_RF_-_Power_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_Large_O2_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_Small_O2_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_CF4_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_NF3_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_Argon_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_Gas_-_N2H2_Flow_Deviation_(post_Run)} as double,\n\t\t{Sig:_MW_-_Reflected_Power_(Steady_state)_(post_Run)} as double,\n\t\t{Sig:_RF_-_Reflected_Power_(Steady_state)_(post_Run)} as double,\n\t\t{Sig:_Pres_-_Pressure_Deviation_(High_Pressure)(Steady_State)_(post_Run)} as double,\n\t\t{Sig:_EP_-_EP_Intensity_after_resist_removal_(post_Run)} as double,\n\t\t{Sig:_Temp_-_Hot_Plate_Deviation_(post_Run)} as double,\n\t\t{Sig:_EP_-_EP_Max_Intensity_with_no_RF} as double,\n\t\t{Sig:_Pres_-_Pressure_Deviation_(Low_Pressure)(Steady_State)_(post_Run)} as double,\n\t\t{Sig:_Filter:_Slot_Number_Correction_>_25} as short,\n\t\t{Sig:_Filter:_Slot_Number_Corrected_Value} as short,\n\t\t{Sig:_RF_-_Bias_(Power_on)_(post_Run)} as double,\n\t\t{Sig:_Overash_Time_7V} as double,\n\t\t{Sig:_Overash_Percentage_7V} as double,\n\t\t{Sig:_Overash_Percentage_filtered_for_Data_Age_7V} as double,\n\t\t{Sig:_EP_-_End_Point_voltage_above_trigger._(post_Run)} as double,\n\t\t{Sig:_Gas:_O2_Large_Usage_(liters)} as double,\n\t\t{Sig:_Gas:_O2_Small_Usage_(liters)} as double,\n\t\t{Sig:_Gas:_NF3_Usage_(liters)} as double,\n\t\t{Sig:_Gas:_CF4_Usage_(liters)} as double,\n\t\t{Sig:_Gas:_N2H2_Usage_(liters)} as double,\n\t\t{Sig:_Gas:_Argon_Usage_(liters)} as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\twildcardPaths:[(concat($recursiveInputPath, '/*.csv'))]) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tmapColumn(\n\t\teach(match(true()),\n\t\t\treplace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace($$,';',''),':',''),':',''),'(',''),')',''),' ',''),' ',''),')',''),'(',''),']',''),'[',''),'(',''),')',''),'>',''),'\\'','') = $$)\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/mergedCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_ETL_ETH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL_USR_ETH",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Deployments/DEV/ETL_USR/ETL_USR_ETH_dev"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_rado",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		}
	]
}