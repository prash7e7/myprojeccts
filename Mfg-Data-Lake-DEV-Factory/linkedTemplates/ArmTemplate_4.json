{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Mfg-Data-Lake-DEV-Factory"
		},
		"Trigger_ebs_properties_CopyPipeline_exensio_mdw_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@{addminutes(trigger().scheduledTime, -5)}"
		},
		"Trigger_ebs_properties_CopyPipeline_exensio_mdw_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().scheduledTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Trasformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "sandbox"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetDestinationStore",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/YieldCleanFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "sandbox"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "YieldInputCSV",
								"type": "DatasetReference"
							},
							"name": "YieldSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "YieldParquetCY",
								"type": "DatasetReference"
							},
							"name": "YieldSink"
						}
					],
					"transformations": [
						{
							"name": "SelectExtraction"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "SelectExtraction2"
						},
						{
							"name": "SelectExtraction3"
						},
						{
							"name": "SelectionExtraction4"
						},
						{
							"name": "FTLotInsertionRank"
						},
						{
							"name": "ECIDTestPassRank"
						},
						{
							"name": "ECIDReworkRank"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['sandbox/user/zbmhpw/source/']) ~> YieldSource\nECIDReworkRank select(mapColumn(\n\t\teach(match(name!=\"lot_key\"&&name!=\"rework_flag\"),\n\t\t\tregexReplace($$,\" \",\"_\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectExtraction\nYieldSource derive(ECID = iif(\r\n    isNull(toString(byName('DLT_LOC (1=GRESHAM) TAG'))), 'EMPTY',\r\n    concat(\"G\", iif(toInteger(byName('DLT_YR (8=2017 - 9=2018 - ETC) TAG')) == 12, \r\n        concat(\"AY\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\"-\", \r\n                        concat(right(toString(toInteger(byName('DLT_WAFER TAG')) + 100), 2), \r\n                            concat(\":\", \r\n                                concat(toString(byName('DLT_X TAG')),\r\n                                    concat(\":\", toString(byName('DLT_Y TAG'))))))))), \r\n        concat(\"AW\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\"-\", \r\n                        concat(right(toString(toInteger(byName('DLT_WAFER TAG')) + 100), 2), \r\n                            concat(\":\", \r\n                                concat(toString(byName('DLT_X TAG')),\r\n                                    concat(\":\", toString(byName('DLT_Y TAG')))))))))))\r\n),\n\t\tFab_Wafer = iif(\r\n    isNull(toString(byName('DLT_LOC (1=GRESHAM) TAG'))), 'EMPTY',\r\n    concat(\"G\", iif(toInteger(byName('DLT_YR (8=2017 - 9=2018 - ETC) TAG')) == 12, \r\n        concat(\"AY\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\"-\", right(toString(toInteger(byName('DLT_WAFER TAG')) + 100), 2)))), \r\n        concat(\"AW\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\"-\", right(toString(toInteger(byName('DLT_WAFER TAG')) + 100), 2))))))\r\n),\n\t\tFab_Lot = iif(\r\n    isNull(toString(byName('DLT_LOC (1=GRESHAM) TAG'))), 'EMPTY',\r\n    concat(\"G\", iif(toInteger(byName('DLT_YR (8=2017 - 9=2018 - ETC) TAG')) == 12, \r\n        concat(\"AY\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\".\", \"S\"))), \r\n        concat(\"AW\", \r\n            concat(right(toString(toInteger(byName('DLT_WEEK TAG')) + 100), 2)),\r\n                concat(right(toString(toInteger(byName('DLT_LOT TAG')) + 1000), 3), \r\n                    concat(\".\", \"S\")))))\r\n),\n\t\tFTLot = case(\r\n    right(toString(byName('Lot')), 2) == \"SS\", left(toString(byName('Lot')), length(toString(byName('Lot'))) - 2),\r\n    right(toString(byName('Lot')), 1) == \"S\", left(toString(byName('Lot')), length(toString(byName('Lot'))) - 1),\r\n    toString(byName('Lot'))\r\n    ),\n\t\tECID_Timestamp = add(toTimestamp(byName('start_time'), 'MM/dd/yyy HH:mm'), seconds(toInteger(byName('serial')))),\n\t\tPassDie = iif(toInteger(byName('STDF_SwBin'))==1, 1, 0)) ~> DerivedColumn1\nSelectExtraction select(mapColumn(\n\t\tECID,\n\t\tFTLot,\n\t\tECID_Timestamp,\n\t\tECID_Test_Pass,\n\t\tECID_Rework,\n\t\teach(match(true()),\n\t\t\treplace($$,\"(\",\"\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectExtraction2\nSelectExtraction2 select(mapColumn(\n\t\tECID,\n\t\tFTLot,\n\t\tECID_Timestamp,\n\t\tECID_Test_Pass,\n\t\tECID_Rework,\n\t\teach(match(true()),\n\t\t\treplace($$,\")\",\"\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectExtraction3\nSelectExtraction3 select(mapColumn(\n\t\tECID,\n\t\tFab_Wafer,\n\t\tFab_Lot,\n\t\tECID_Timestamp,\n\t\tECID_Test_Pass,\n\t\tECID_Rework,\n\t\tFTLot,\n\t\tFTLotInsertion,\n\t\tPassDie,\n\t\teach(match(true()),\n\t\t\treplace($$,\"=\",\"\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectionExtraction4\nDerivedColumn1 rank(asc(FTLot, true),\n\toutput(FTLotInsertion as long),\n\tdense: true) ~> FTLotInsertionRank\nFTLotInsertionRank window(over(ECID),\n\tasc(ECID_Timestamp, true),\n\tECID_Test_Pass = denseRank()) ~> ECIDTestPassRank\nECIDTestPassRank window(over(ECID),\n\tdesc(ECID_Timestamp, true),\n\tECID_Rework = denseRank()) ~> ECIDReworkRank\nSelectionExtraction4 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfilePattern:'outputParquetFile[n].parquet',\n\tpartitionBy('key',\n\t\t0,\n\t\tECID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> YieldSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/YieldCleanFlow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "sandbox"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "YieldCSVCY",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "YieldParquetCY",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Select3"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 select(mapColumn(\n\t\teach(match(name!=\"lot_key\"&&name!=\"rework_flag\"),\n\t\t\tregexReplace($$,\" \",\"_\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\treplace($$,\"(\",\"\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\treplace($$,\")\",\"\") = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleanCSV_Delta_Parquet_ASH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CleanCSV_ASH",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ASH_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "onsemidevmdlstoragelink",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\t{_c0} as short,\n\t\tFilename_Translated as string,\n\t\tFilename_Original as string,\n\t\tFabGuard_Version as string,\n\t\tRun_Path_and_Name as string,\n\t\tRecipe_Path_and_Name as string,\n\t\tSensorID as string,\n\t\tVersion as string,\n\t\tAcquired_with_Version as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Group as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Area as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_FabGuard as short,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Serial_Number as integer,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Version as string,\n\t\tSubstrate_Information_Lot_ID as string,\n\t\tSubstrate_Information_Cassette_ID as short,\n\t\tSubstrate_Information_Slot_ID as short,\n\t\tSubstrate_Information_Substrate_ID as string,\n\t\tSubstrate_Information_Part_ID as string,\n\t\tSubstrate_Information_Layer_ID as string,\n\t\tSubstrate_Information_Technology_ID as string,\n\t\tSubstrate_Information_Substrate_Start_Time_local as timestamp,\n\t\tSubstrate_Information_Substrate_Start_Time_GMT as timestamp,\n\t\tProcess_Information_Operator_ID as string,\n\t\tProcess_Information_Sequence_ID as string,\n\t\tProcess_Information_Recipe_ID as string,\n\t\tProcess_Information_Control_Job_ID as string,\n\t\tProcess_Information_Process_ID as string,\n\t\tExtra_Information_Extra_1_ID as string,\n\t\tExtra_Information_Extra_2_ID as string,\n\t\tExtra_Information_Extra_3_ID as string,\n\t\tExtra_Information_Extra_4_ID as string,\n\t\tExtra_Information_Extra_5_ID as string,\n\t\tExtra_Information_Extra_6_ID as string,\n\t\tExtra_Information_Extra_7_ID as string,\n\t\tExtra_Information_Extra_8_ID as string,\n\t\tGeneral_Info_Start_Time as string,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_location as timestamp,\n\t\tGeneral_Info_FabGuards_Recipe_Path_and_Name as string,\n\t\tGeneral_Info_FabGuards_Recipe_Revision as short,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_by as string,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_Time_local as timestamp,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_GMT as timestamp,\n\t\tGeneral_Info_Run_Path_and_Name as string,\n\t\tGeneral_Info_Duration_s as double,\n\t\tGeneral_Info_Number_of_Data_Points as short,\n\t\tGeneral_Info_Number_of_Scans as boolean,\n\t\tGeneral_Info_Number_of_Bins as short,\n\t\tBins as short,\n\t\tTimePoints as short,\n\t\tTimeRelativesec as double,\n\t\tTimeAbsoluteUTC as double,\n\t\tTimeAbsoluteDate_Time as string,\n\t\tStep as boolean,\n\t\tStatus as boolean,\n\t\tTool_Pres_CM_mTorr_SVID167813621 as short,\n\t\tTool_Pwr_Bot_RF_Fwd_W_SVID167813623 as short,\n\t\tTool_Pwr_Bot_RF_Refl_W_SVID167813625 as short,\n\t\tTool_Pwr_Bot_RF_VPP_V_SVID167813627 as short,\n\t\tTool_Pwr_Bot_RF_VDC_V_SVID167813629 as short,\n\t\tTool_Gas_C4F8_Flow_sccm_SVID167813630 as double,\n\t\tTool_Gas_C5F8_Flow_sccm_SVID167813631 as double,\n\t\tTool_Gas_CO_Flow_sccm_SVID167813632 as double,\n\t\tTool_Gas_Ar_Flow_sccm_SVID167813633 as double,\n\t\tTool_Gas_O2_30_sccm_Flow_sccm_SVID167813634 as double,\n\t\tTool_Gas_CHF3_Flow_sccm_SVID167813635 as double,\n\t\tTool_Gas_CF4_Flow_sccm_SVID167813636 as double,\n\t\tTool_Gas_O2_1_SLM_Flow_sccm_SVID167813637 as double,\n\t\tTool_Temp_Elec_Top_degC_SVID167813638 as double,\n\t\tTool_Temp_Wall_Side_degC_SVID167813639 as double,\n\t\tTool_Temp_Elec_Bot_degC_SVID167813640 as double,\n\t\tTool_He_Pres_Back_1_Torr_SVID167813641 as double,\n\t\tTool_He_Pres_Back_2_Torr_SVID167813642 as double,\n\t\tTool_He_Flow_1_sccm_SVID167813643 as double,\n\t\tTool_He_Flow_2_sccm_SVID167813644 as double,\n\t\tTool_ESC_Voltage_V_SVID167813645 as short,\n\t\tTool_ESC_Current_uA_SVID167813646 as short,\n\t\tTool_Pres_APC_Pos_deg_SVID167813647 as double,\n\t\tTool_Gap_Dist_mm_SVID167813648 as double,\n\t\tTool_Cap_C1_Bot_Pos_SVID167813651 as short,\n\t\tTool_Cap_C2_Bot_Pos_SVID167813652 as short,\n\t\tTool_Imped_R_Top_ohm_SVID167813653 as boolean,\n\t\tTool_Imped_Jx_Top_ohm_SVID167813654 as boolean,\n\t\tTool_Imped_R_Bot_ohm_SVID167813655 as boolean,\n\t\tTool_Imped_Jx_Bot_ohm_SVID167813656 as boolean,\n\t\tTool_Phase_SVID167813658 as short,\n\t\tTool_Magnitude_SVID167813659 as short,\n\t\t{Tool_Rcp_Step_Num_SVID167813666_[Tool's_Step]} as short,\n\t\tTool_Rcp_Step_Time_sec_SVID167813667 as double,\n\t\tTool_Gas_CH2F2_Flow_sccm_SVID167813678 as double,\n\t\tTool_Gas_N2_Flow_sccm_SVID167813679 as double,\n\t\tTool_Gas_He_Flow_sccm_SVID167813680 as short,\n\t\tTool_Gas_H2_Flow_sccm_SVID167813681 as double,\n\t\tTool_Gas_CHF3_2_Flow as double,\n\t\tTool_Bin_Polling_Latency as double,\n\t\tTool_Bin_Data_Age as double,\n\t\tTool_Bin_Data_Age_SECS as double,\n\t\tSig_Bot_RF_On as boolean,\n\t\tSig_Edge_He_Backside_Pressure_RF_On as double,\n\t\tSig_Center_He_Backside_Pressure_RF_On as double,\n\t\tSig_Center_He_Backside_Flow_RF_On as double,\n\t\tSig_Edge_He_Backside_Flow_RF_On as double,\n\t\tSig_Upper_Temperature_RF_On as double,\n\t\tSig_Side_Temperature_RF_On as double,\n\t\tSig_Lower_Temperature_RF_On as double,\n\t\tSig_ElectroStatic_Chuck_Voltage_RF_On as double,\n\t\tSig_ElectroStatic_Chuck_Current_RF_On as double,\n\t\tSig_Chamber_Pressure_RF_On_Steady_State_post_Run as double,\n\t\tSig_CH2F2_Flow_RF_On as double,\n\t\tSig_Vpp_Arc_Counter_1450_W as double,\n\t\tSig_No_arc__0 as double,\n\t\t{Sig_Vpp_Arc_Counter_1200-1450_W} as double,\n\t\tSig_Vpp_Arc_Counter_1450_W_v2_post_Run as double,\n\t\tSig_Reflected_Power_of_Stady_State_post_Run as double,\n\t\tSig_Filter_Acceptable_Data_Age as boolean,\n\t\t{Sig_Pwr_Bot_RF_Fwd_DevAvg_Steady_State_5-60} as double,\n\t\t{Sig_Gas_Ar_Steady_State_5-60_RF_On_post_Run} as double,\n\t\t{Sig_Gas_Ar_DevAvg_Steady_State_5-60_RF_On_post_Run} as double,\n\t\tSig_VPP_TRIM_Step_4_post_Run as double,\n\t\tSig_C4F8_TRIM_Step_4_post_Run as double,\n\t\tSig_VPP_TRIM_Step_2_post_Run as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> source1\nsource1 sink(input(\n\t\t{_c0} as string,\n\t\tFilename_Translated as string,\n\t\tFilename_Original as string,\n\t\tFabGuard_Version as string,\n\t\tRun_Path_and_Name as string,\n\t\tRecipe_Path_and_Name as string,\n\t\tSensorID as string,\n\t\tVersion as string,\n\t\tAcquired_with_Version as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Group as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Area as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_FabGuard as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Serial_Number as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Version as string,\n\t\tSubstrate_Information_Lot_ID as string,\n\t\tSubstrate_Information_Cassette_ID as string,\n\t\tSubstrate_Information_Slot_ID as string,\n\t\tSubstrate_Information_Substrate_ID as string,\n\t\tSubstrate_Information_Part_ID as string,\n\t\tSubstrate_Information_Layer_ID as string,\n\t\tSubstrate_Information_Technology_ID as string,\n\t\tSubstrate_Information_Substrate_Start_Time_local as string,\n\t\tSubstrate_Information_Substrate_Start_Time_GMT as string,\n\t\tProcess_Information_Operator_ID as string,\n\t\tProcess_Information_Sequence_ID as string,\n\t\tProcess_Information_Recipe_ID as string,\n\t\tProcess_Information_Control_Job_ID as string,\n\t\tProcess_Information_Process_ID as string,\n\t\tExtra_Information_Extra_1_ID as string,\n\t\tExtra_Information_Extra_2_ID as string,\n\t\tExtra_Information_Extra_3_ID as string,\n\t\tExtra_Information_Extra_4_ID as string,\n\t\tExtra_Information_Extra_5_ID as string,\n\t\tExtra_Information_Extra_6_ID as string,\n\t\tExtra_Information_Extra_7_ID as string,\n\t\tExtra_Information_Extra_8_ID as string,\n\t\tGeneral_Info_Start_Time as string,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_location as string,\n\t\tGeneral_Info_FabGuards_Recipe_Path_and_Name as string,\n\t\tGeneral_Info_FabGuards_Recipe_Revision as string,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_by as string,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_Time_local as string,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_GMT as string,\n\t\tGeneral_Info_Run_Path_and_Name as string,\n\t\tGeneral_Info_Duration_s as string,\n\t\tGeneral_Info_Number_of_Data_Points as string,\n\t\tGeneral_Info_Number_of_Scans as string,\n\t\tGeneral_Info_Number_of_Bins as string,\n\t\tBins as string,\n\t\tTimePoints as string,\n\t\tTimeRelativesec as string,\n\t\tTimeAbsoluteUTC as string,\n\t\tTimeAbsoluteDate_Time as string,\n\t\tStep as string,\n\t\tStatus as string,\n\t\tTool_Pres_CM_mTorr_SVID167813621 as string,\n\t\tTool_Pwr_Bot_RF_Fwd_W_SVID167813623 as string,\n\t\tTool_Pwr_Bot_RF_Refl_W_SVID167813625 as string,\n\t\tTool_Pwr_Bot_RF_VPP_V_SVID167813627 as string,\n\t\tTool_Pwr_Bot_RF_VDC_V_SVID167813629 as string,\n\t\tTool_Gas_C4F8_Flow_sccm_SVID167813630 as string,\n\t\tTool_Gas_C5F8_Flow_sccm_SVID167813631 as string,\n\t\tTool_Gas_CO_Flow_sccm_SVID167813632 as string,\n\t\tTool_Gas_Ar_Flow_sccm_SVID167813633 as string,\n\t\tTool_Gas_O2_30_sccm_Flow_sccm_SVID167813634 as string,\n\t\tTool_Gas_CHF3_Flow_sccm_SVID167813635 as string,\n\t\tTool_Gas_CF4_Flow_sccm_SVID167813636 as string,\n\t\tTool_Gas_O2_1_SLM_Flow_sccm_SVID167813637 as string,\n\t\tTool_Temp_Elec_Top_degC_SVID167813638 as string,\n\t\tTool_Temp_Wall_Side_degC_SVID167813639 as string,\n\t\tTool_Temp_Elec_Bot_degC_SVID167813640 as string,\n\t\tTool_He_Pres_Back_1_Torr_SVID167813641 as string,\n\t\tTool_He_Pres_Back_2_Torr_SVID167813642 as string,\n\t\tTool_He_Flow_1_sccm_SVID167813643 as string,\n\t\tTool_He_Flow_2_sccm_SVID167813644 as string,\n\t\tTool_ESC_Voltage_V_SVID167813645 as string,\n\t\tTool_ESC_Current_uA_SVID167813646 as string,\n\t\tTool_Pres_APC_Pos_deg_SVID167813647 as string,\n\t\tTool_Gap_Dist_mm_SVID167813648 as string,\n\t\tTool_Cap_C1_Bot_Pos_SVID167813651 as string,\n\t\tTool_Cap_C2_Bot_Pos_SVID167813652 as string,\n\t\tTool_Imped_R_Top_ohm_SVID167813653 as string,\n\t\tTool_Imped_Jx_Top_ohm_SVID167813654 as string,\n\t\tTool_Imped_R_Bot_ohm_SVID167813655 as string,\n\t\tTool_Imped_Jx_Bot_ohm_SVID167813656 as string,\n\t\tTool_Phase_SVID167813658 as string,\n\t\tTool_Magnitude_SVID167813659 as string,\n\t\t{Tool_Rcp_Step_Num_SVID167813666_[Tool's_Step]} as string,\n\t\tTool_Rcp_Step_Time_sec_SVID167813667 as string,\n\t\tTool_Gas_CH2F2_Flow_sccm_SVID167813678 as string,\n\t\tTool_Gas_N2_Flow_sccm_SVID167813679 as string,\n\t\tTool_Gas_He_Flow_sccm_SVID167813680 as string,\n\t\tTool_Gas_H2_Flow_sccm_SVID167813681 as string,\n\t\tTool_Gas_CHF3_2_Flow as string,\n\t\tTool_Bin_Polling_Latency as string,\n\t\tTool_Bin_Data_Age as string,\n\t\tTool_Bin_Data_Age_SECS as string,\n\t\tSig_Bot_RF_On as string,\n\t\tSig_Edge_He_Backside_Pressure_RF_On as string,\n\t\tSig_Center_He_Backside_Pressure_RF_On as string,\n\t\tSig_Center_He_Backside_Flow_RF_On as string,\n\t\tSig_Edge_He_Backside_Flow_RF_On as string,\n\t\tSig_Upper_Temperature_RF_On as string,\n\t\tSig_Side_Temperature_RF_On as string,\n\t\tSig_Lower_Temperature_RF_On as string,\n\t\tSig_ElectroStatic_Chuck_Voltage_RF_On as string,\n\t\tSig_ElectroStatic_Chuck_Current_RF_On as string,\n\t\tSig_Chamber_Pressure_RF_On_Steady_State_post_Run as string,\n\t\tSig_CH2F2_Flow_RF_On as string,\n\t\tSig_Vpp_Arc_Counter_1450_W as string,\n\t\tSig_No_arc__0 as string,\n\t\t{Sig_Vpp_Arc_Counter_1200-1450_W} as string,\n\t\tSig_Vpp_Arc_Counter_1450_W_v2_post_Run as string,\n\t\tSig_Reflected_Power_of_Stady_State_post_Run as string,\n\t\tSig_Filter_Acceptable_Data_Age as string,\n\t\t{Sig_Pwr_Bot_RF_Fwd_DevAvg_Steady_State_5-60} as string,\n\t\t{Sig_Gas_Ar_Steady_State_5-60_RF_On_post_Run} as string,\n\t\t{Sig_Gas_Ar_DevAvg_Steady_State_5-60_RF_On_post_Run} as string,\n\t\tSig_VPP_TRIM_Step_4_post_Run as string,\n\t\tSig_C4F8_TRIM_Step_4_post_Run as string,\n\t\tSig_VPP_TRIM_Step_2_post_Run as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tmapColumn(\n\t\teach(match(true()),\n\t\t\treplace(replace(replace($$,'\\'',''),'[',''),']','') = $$)\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'adls',\n\tfolderPath: 'translated/examples/ASH.delta.df',\n\ttruncate: false,\n\tmergeSchema: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\teach(match(true()),\n\t\t\treplace(replace(replace($$,'\\'',''),'[',''),']','') = $$)\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleanCSV_Delta_Parquet_ETH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CleanCSV_ETH",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ETH_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "onsemidevmdlstoragelink",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\t{_c0} as short,\n\t\tFilename_Translated as string,\n\t\tFilename_Original as string,\n\t\tFabGuard_Version as string,\n\t\tRun_Path_and_Name as string,\n\t\tRecipe_Path_and_Name as string,\n\t\tSensorID as string,\n\t\tVersion as string,\n\t\tAcquired_with_Version as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Group as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Area as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Tool_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_FabGuard as short,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_ID as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Description as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_Chamber_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Type as string,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Serial_Number as integer,\n\t\tEquipment_Information_Tool_Chamber_and_Sensor_1_TDS_Version as string,\n\t\tSubstrate_Information_Lot_ID as string,\n\t\tSubstrate_Information_Cassette_ID as short,\n\t\tSubstrate_Information_Slot_ID as short,\n\t\tSubstrate_Information_Substrate_ID as string,\n\t\tSubstrate_Information_Part_ID as string,\n\t\tSubstrate_Information_Layer_ID as string,\n\t\tSubstrate_Information_Technology_ID as string,\n\t\tSubstrate_Information_Substrate_Start_Time_local as timestamp,\n\t\tSubstrate_Information_Substrate_Start_Time_GMT as timestamp,\n\t\tProcess_Information_Operator_ID as string,\n\t\tProcess_Information_Sequence_ID as string,\n\t\tProcess_Information_Recipe_ID as string,\n\t\tProcess_Information_Control_Job_ID as string,\n\t\tProcess_Information_Process_ID as string,\n\t\tExtra_Information_Extra_1_ID as string,\n\t\tExtra_Information_Extra_2_ID as string,\n\t\tExtra_Information_Extra_3_ID as string,\n\t\tExtra_Information_Extra_4_ID as string,\n\t\tExtra_Information_Extra_5_ID as string,\n\t\tExtra_Information_Extra_6_ID as string,\n\t\tExtra_Information_Extra_7_ID as string,\n\t\tExtra_Information_Extra_8_ID as string,\n\t\tGeneral_Info_Start_Time as string,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_location as timestamp,\n\t\tGeneral_Info_FabGuards_Recipe_Path_and_Name as string,\n\t\tGeneral_Info_FabGuards_Recipe_Revision as short,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_by as string,\n\t\tGeneral_Info_FabGuards_Recipe_last_modified_Time_local as timestamp,\n\t\tGeneral_Info_Start_Time_at_the_acquisition_GMT as timestamp,\n\t\tGeneral_Info_Run_Path_and_Name as string,\n\t\tGeneral_Info_Duration_s as double,\n\t\tGeneral_Info_Number_of_Data_Points as short,\n\t\tGeneral_Info_Number_of_Scans as boolean,\n\t\tGeneral_Info_Number_of_Bins as short,\n\t\tBins as short,\n\t\tTimePoints as short,\n\t\tTimeRelativesec as double,\n\t\tTimeAbsoluteUTC as double,\n\t\tTimeAbsoluteDate_Time as string,\n\t\tStep as boolean,\n\t\tStatus as boolean,\n\t\tTool_Pres_CM_mTorr_SVID167813621 as short,\n\t\tTool_Pwr_Bot_RF_Fwd_W_SVID167813623 as short,\n\t\tTool_Pwr_Bot_RF_Refl_W_SVID167813625 as short,\n\t\tTool_Pwr_Bot_RF_VPP_V_SVID167813627 as short,\n\t\tTool_Pwr_Bot_RF_VDC_V_SVID167813629 as short,\n\t\tTool_Gas_C4F8_Flow_sccm_SVID167813630 as double,\n\t\tTool_Gas_C5F8_Flow_sccm_SVID167813631 as double,\n\t\tTool_Gas_CO_Flow_sccm_SVID167813632 as double,\n\t\tTool_Gas_Ar_Flow_sccm_SVID167813633 as double,\n\t\tTool_Gas_O2_30_sccm_Flow_sccm_SVID167813634 as double,\n\t\tTool_Gas_CHF3_Flow_sccm_SVID167813635 as double,\n\t\tTool_Gas_CF4_Flow_sccm_SVID167813636 as double,\n\t\tTool_Gas_O2_1_SLM_Flow_sccm_SVID167813637 as double,\n\t\tTool_Temp_Elec_Top_degC_SVID167813638 as double,\n\t\tTool_Temp_Wall_Side_degC_SVID167813639 as double,\n\t\tTool_Temp_Elec_Bot_degC_SVID167813640 as double,\n\t\tTool_He_Pres_Back_1_Torr_SVID167813641 as double,\n\t\tTool_He_Pres_Back_2_Torr_SVID167813642 as double,\n\t\tTool_He_Flow_1_sccm_SVID167813643 as double,\n\t\tTool_He_Flow_2_sccm_SVID167813644 as double,\n\t\tTool_ESC_Voltage_V_SVID167813645 as short,\n\t\tTool_ESC_Current_uA_SVID167813646 as short,\n\t\tTool_Pres_APC_Pos_deg_SVID167813647 as double,\n\t\tTool_Gap_Dist_mm_SVID167813648 as double,\n\t\tTool_Cap_C1_Bot_Pos_SVID167813651 as short,\n\t\tTool_Cap_C2_Bot_Pos_SVID167813652 as short,\n\t\tTool_Imped_R_Top_ohm_SVID167813653 as boolean,\n\t\tTool_Imped_Jx_Top_ohm_SVID167813654 as boolean,\n\t\tTool_Imped_R_Bot_ohm_SVID167813655 as boolean,\n\t\tTool_Imped_Jx_Bot_ohm_SVID167813656 as boolean,\n\t\tTool_Phase_SVID167813658 as short,\n\t\tTool_Magnitude_SVID167813659 as short,\n\t\t{Tool_Rcp_Step_Num_SVID167813666_[Tool's_Step]} as short,\n\t\tTool_Rcp_Step_Time_sec_SVID167813667 as double,\n\t\tTool_Gas_CH2F2_Flow_sccm_SVID167813678 as double,\n\t\tTool_Gas_N2_Flow_sccm_SVID167813679 as double,\n\t\tTool_Gas_He_Flow_sccm_SVID167813680 as short,\n\t\tTool_Gas_H2_Flow_sccm_SVID167813681 as double,\n\t\tTool_Gas_CHF3_2_Flow as double,\n\t\tTool_Bin_Polling_Latency as double,\n\t\tTool_Bin_Data_Age as double,\n\t\tTool_Bin_Data_Age_SECS as double,\n\t\tSig_Bot_RF_On as boolean,\n\t\tSig_Edge_He_Backside_Pressure_RF_On as double,\n\t\tSig_Center_He_Backside_Pressure_RF_On as double,\n\t\tSig_Center_He_Backside_Flow_RF_On as double,\n\t\tSig_Edge_He_Backside_Flow_RF_On as double,\n\t\tSig_Upper_Temperature_RF_On as double,\n\t\tSig_Side_Temperature_RF_On as double,\n\t\tSig_Lower_Temperature_RF_On as double,\n\t\tSig_ElectroStatic_Chuck_Voltage_RF_On as double,\n\t\tSig_ElectroStatic_Chuck_Current_RF_On as double,\n\t\tSig_Chamber_Pressure_RF_On_Steady_State_post_Run as double,\n\t\tSig_CH2F2_Flow_RF_On as double,\n\t\tSig_Vpp_Arc_Counter_1450_W as double,\n\t\t{Sig_No_arc_=_0} as double,\n\t\t{Sig_Vpp_Arc_Counter_1200-1450_W} as double,\n\t\tSig_Vpp_Arc_Counter_1450_W_v2_post_Run as double,\n\t\tSig_Reflected_Power_of_Stady_State_post_Run as double,\n\t\tSig_Filter_Acceptable_Data_Age as boolean,\n\t\t{Sig_Pwr_Bot_RF_Fwd_DevAvg_Steady_State_5-60} as double,\n\t\t{Sig_Gas_Ar_Steady_State_5-60_RF_On_post_Run} as double,\n\t\t{Sig_Gas_Ar_DevAvg_Steady_State_5-60_RF_On_post_Run} as double,\n\t\tSig_VPP_TRIM_Step_4_post_Run as double,\n\t\tSig_C4F8_TRIM_Step_4_post_Run as double,\n\t\tSig_VPP_TRIM_Step_2_post_Run as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tmapColumn(\n\t\teach(match(true()),\n\t\t\treplace($$,'=','') = $$)\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'adls',\n\tfolderPath: 'translated/examples/ETH.delta.df',\n\ttruncate: false,\n\tmergeSchema: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\teach(match(true()),\n\t\t\treplace($$,'=','') = $$)\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unzip_copy_csv_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "compressedcsv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "USRWEH_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "onsemidevmdlstoragelink",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tLotId as string,\n\t\tFab as string,\n\t\tFamily as string,\n\t\tTechnology as string,\n\t\tPlan as string,\n\t\tDevice as string,\n\t\tSourceLot as string,\n\t\tLotClass as string,\n\t\twf_num as short,\n\t\twf_id as string,\n\t\tSequence as string,\n\t\tProcStep as string,\n\t\tStage as string,\n\t\torig_slot as short,\n\t\tfinal_slot as short,\n\t\torig_cass as short,\n\t\tfinal_cass as short,\n\t\tzone as string,\n\t\tzone_seat as string,\n\t\tboat_seat as string,\n\t\tsubtool as string,\n\t\tequipment as string,\n\t\ttrackInTime as string,\n\t\ttrackOutTime as string,\n\t\trecipe as string,\n\t\tOperator as string,\n\t\tTooling as string,\n\t\tReworkCount as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tskipLines: 1,\n\twildcardPaths:['inbound/site/USR/WEH/*.gz']) ~> source2\nsource2 derive(trackInTime_formated = toTimestamp(trackInTime, 'yyyyMMddHHmmss'),\n\t\ttrackOutTime_formated = toTimestamp(trackOutTime, 'yyyyMMddHHmmss')) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'adls',\n\tfolderPath: 'translated/delta/site/USR/WEH',\n\ttruncate: false,\n\tmergeSchema: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink4"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_exensio_mdw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_exensio_mdw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adls/inbound/app/middleware-test/"
							},
							{
								"name": "Destination",
								"value": "translated/parquet/app/middleware-prod/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2021-01-14T00:00:00.000Z",
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "InterfaceName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InterfaceName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "InterfaceFolder",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InterfaceFolder",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "DirSource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DirSource",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "DirDestination",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DirDestination",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FileName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FileName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FileSize (KB)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FileSize",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "RunId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RunId",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "StartTime",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EndTime",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ElapsedTime (s)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ElapsedTime",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Message",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Message",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "mdw_logs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "mdw_logs_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "MDW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ASH_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cleanCSV_Delta_Parquet_ASH",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cleanCSV_Delta_Parquet_ASH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-08-18T08:34:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cleanCSV_Delta_Parquet_ASH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFiles_from_adls_toprem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore2",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "FileServerWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore2",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore2",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "outbound"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "outbound"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "staged"
					}
				},
				"folder": {
					"name": "Copy Jobs"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-09T18:54:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore1",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": "@pipeline().parameters.SourceFileDirectory"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteActivity",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "onsemidevmdlstoragelink",
												"type": "LinkedServiceReference"
											},
											"path": "adls/inbound/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"wildcardFileName": "*.*"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "inbound"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "staged"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "inbound"
					}
				},
				"folder": {
					"name": "Copy Jobs"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-09T18:54:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_ETL_ASH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL_USR_ASH_parsing",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Deployments/DEV/ETL_USR/ETL_USR_ASH_dev"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_rado",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cleanCSV_Delta_Parquet_ASH",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ETL_USR_ASH_parsing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cleanCSV_Delta_Parquet_ASH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ETL_USR_ASH_csv",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ETL_USR_ASH_parsing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Deployments/DEV/ETL_USR/ETL_USR_ASH_csv_delta_parquet_dev"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_rado",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FDC_ASH_PIM_Batch_Detection",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ETL_USR_ASH_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Deployments/DEV/FDC_Batch_Detection/FDC_ASH_PIM_Batch_Detection"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_rado_ml_cluster",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Databricks_ETL"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-01T09:46:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cleanCSV_Delta_Parquet_ASH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_ETL_ETH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL_USR_ETH",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Deployments/DEV/ETL_USR/ETL_USR_ETH_dev"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks_rado",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "cleanCSV_Delta_Parquet_ETH",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ETL_USR_ETH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cleanCSV_Delta_Parquet_ETH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "Databricks_ETL"
				},
				"annotations": [],
				"lastPublishTime": "2020-08-17T20:44:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cleanCSV_Delta_Parquet_ETH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETH_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cleanCSV_Delta_Parquet_ETH",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cleanCSV_Delta_Parquet_ETH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-08-18T08:34:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cleanCSV_Delta_Parquet_ETH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeCSVToParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MergeCSV_to_Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MergeCSV_to_Parquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-08-13T17:42:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecursiveConvertCSVToParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore3",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FolderFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FolderFilter').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowForCSVMergeToParquet",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore3",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore3",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DataFlowForCSVMergeToParquet",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DataFlowForCSVMergeToParquet",
											"type": "DataFlowReference",
											"parameters": {
												"recursiveInputPath": {
													"value": "'@{concat(pipeline().parameters.SourceFileDirectory,'/',item().name)}'",
													"type": "Expression"
												},
												"recursiveOutputPath": {
													"value": "'@{concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "FolderFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'), equals(item().name, '2020-008-01'))",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "translated/csv/site/USR/FDC/Tools/ASH10653"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "translated/parquet/site/USR/FDC/Tools/ASH10653"
					}
				},
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-09T18:54:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/YieldPipelineCY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFileNames",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "YieldCSVCY",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileNames').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "YieldCleanFlow",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "YieldCleanFlow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"YieldSource": {
													"fileName": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												"YieldSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-25T02:04:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/YieldCleanFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/YieldPipelineSingleFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "YieldCleanFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "YieldCleanFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"YieldSource": {
										"fileName": "fileName"
									},
									"YieldSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/YieldCleanFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyfromDBtoParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RecordID",
											"type": "Int32"
										},
										"sink": {
											"name": "RecordID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Lot",
											"type": "String"
										},
										"sink": {
											"name": "Lot",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ActualShipDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ActualShipDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "MainQty",
											"type": "Int32"
										},
										"sink": {
											"name": "MainQty",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ShipFixUp",
											"type": "Int32"
										},
										"sink": {
											"name": "ShipFixUp",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "fabtimshipment",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "mfgdlparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "sandbox"
				},
				"annotations": [],
				"lastPublishTime": "2020-08-13T17:42:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unzip_plus_transformcsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "csv_delta_parquet",
						"description": "csv_delta_parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Empty File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "unzip_copy_csv_delta",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source2": {},
									"sink2": {},
									"sink4": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteFiles",
						"description": "Connect to your storage account to save the log file.",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "csv_delta_parquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDatasetForDeleteActivity",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFolder",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "onsemidevmdlstoragelink",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().parameters.LoggingPath",
									"type": "Expression"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.gz"
							}
						}
					},
					{
						"name": "Delete Empty File",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete Empty Files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"parameters": {
					"SourceFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "inbound/site/USR/WEH"
					},
					"LoggingPath": {
						"type": "string",
						"defaultValue": "inbound/site/USR/WEH/deletelogs"
					}
				},
				"folder": {
					"name": "USR_WEH"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-25T02:04:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/unzip_copy_csv_delta')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_ebs')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_exensio_mdw",
							"type": "PipelineReference"
						},
						"parameters": {
							"windowStart": {
								"type": "Expression",
								"value": "[parameters('Trigger_ebs_properties_CopyPipeline_exensio_mdw_parameters_windowStart')]"
							},
							"windowEnd": {
								"type": "Expression",
								"value": "[parameters('Trigger_ebs_properties_CopyPipeline_exensio_mdw_parameters_windowEnd')]"
							}
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2021-01-15T09:47:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		}
	]
}