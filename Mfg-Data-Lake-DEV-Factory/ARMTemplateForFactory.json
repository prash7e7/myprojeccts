{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Mfg-Data-Lake-DEV-Factory"
		},
		"ADLSBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ADLSBlobStorage'"
		},
		"AzureSynapseDLLink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseDLLink'"
		},
		"ONPREMALLUSERS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ONPREMALLUSERS'"
		},
		"ONPREMVM_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ONPREMVM'"
		},
		"fabtimesqlserver_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fabtimesqlserver'"
		},
		"ONPREMALLUSERS_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\USCO01WS0029\\adls"
		},
		"ONPREMALLUSERS_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "onsemi\\fabtimesys"
		},
		"ONPREMVM_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\USCO01WS0029.ad.onsemi.com\\MLArtifacts"
		},
		"ONPREMVM_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "onsemi\\fabtimesys"
		},
		"onsemidevmdlstoragelink_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://onsemidevmdlstorage.dfs.core.windows.net"
		},
		"CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_SourceFileFolder": {
			"type": "string",
			"defaultValue": "inbound"
		},
		"CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_SourceFileDirectory": {
			"type": "string",
			"defaultValue": "staged"
		},
		"CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileFolder": {
			"type": "string",
			"defaultValue": "adls"
		},
		"CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileDirectory": {
			"type": "string",
			"defaultValue": "inbound"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Bulk Copy from Files to Database')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetadataDataset",
								"type": "DatasetReference",
								"parameters": {
									"SourceContainer": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"SourceDirectory": {
										"value": "@pipeline().parameters.SourceDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "ffyn9j",
												"wildcardFileName": "student-mat.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": true
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ADLSBlobStorage",
												"type": "LinkedServiceReference"
											},
											"path": "adfsolutiontemplate/BulkCopyfromFilestoDB"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "school",
														"type": "String"
													},
													"sink": {
														"name": "school",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "sex",
														"type": "String"
													},
													"sink": {
														"name": "sex",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "age",
														"type": "String"
													},
													"sink": {
														"name": "age",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "address",
														"type": "String"
													},
													"sink": {
														"name": "address",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "famsize",
														"type": "String"
													},
													"sink": {
														"name": "famsize",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Pstatus",
														"type": "String"
													},
													"sink": {
														"name": "Pstatus",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Medu",
														"type": "String"
													},
													"sink": {
														"name": "Medu",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fedu",
														"type": "String"
													},
													"sink": {
														"name": "Fedu",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Mjob",
														"type": "String"
													},
													"sink": {
														"name": "Mjob",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fjob",
														"type": "String"
													},
													"sink": {
														"name": "Fjob",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "reason",
														"type": "String"
													},
													"sink": {
														"name": "reason",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "guardian",
														"type": "String"
													},
													"sink": {
														"name": "guardian",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "traveltime",
														"type": "String"
													},
													"sink": {
														"name": "traveltime",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "studytime",
														"type": "String"
													},
													"sink": {
														"name": "studytime",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "failures",
														"type": "String"
													},
													"sink": {
														"name": "failures",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "schoolsup",
														"type": "String"
													},
													"sink": {
														"name": "schoolsup",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "famsup",
														"type": "String"
													},
													"sink": {
														"name": "famsup",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "paid",
														"type": "String"
													},
													"sink": {
														"name": "paid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "activities",
														"type": "String"
													},
													"sink": {
														"name": "activities",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "nursery",
														"type": "String"
													},
													"sink": {
														"name": "nursery",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "higher",
														"type": "String"
													},
													"sink": {
														"name": "higher",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "internet",
														"type": "String"
													},
													"sink": {
														"name": "internet",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "romantic",
														"type": "String"
													},
													"sink": {
														"name": "romantic",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "famrel",
														"type": "String"
													},
													"sink": {
														"name": "famrel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "freetime",
														"type": "String"
													},
													"sink": {
														"name": "freetime",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "goout",
														"type": "String"
													},
													"sink": {
														"name": "goout",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Dalc",
														"type": "String"
													},
													"sink": {
														"name": "Dalc",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Walc",
														"type": "String"
													},
													"sink": {
														"name": "Walc",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "health",
														"type": "String"
													},
													"sink": {
														"name": "health",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "absences",
														"type": "String"
													},
													"sink": {
														"name": "absences",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "G1",
														"type": "String"
													},
													"sink": {
														"name": "G1",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "G2",
														"type": "String"
													},
													"sink": {
														"name": "G2",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "G3",
														"type": "String"
													},
													"sink": {
														"name": "G3",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"SourceContainer": {
													"value": "@pipeline().parameters.SourceContainer",
													"type": "Expression"
												},
												"SourceDirectory": {
													"value": "@pipeline().parameters.SourceDirectory",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlDWSinkDataset",
											"type": "DatasetReference",
											"parameters": {
												"sinkTableName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"SourceContainer": {
						"type": "string",
						"defaultValue": "adls\\inbound\\user"
					},
					"SourceDirectory": {
						"type": "string",
						"defaultValue": "ffyn9j"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GetMetadataDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlDWSinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLSBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore1",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": "@pipeline().parameters.SourceFileDirectory"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteActivity",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "onsemidevmdlstoragelink",
												"type": "LinkedServiceReference"
											},
											"path": "adls/inbound/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"wildcardFileName": "*.*"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "inbound"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "staged"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "inbound"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinarySourceFileStore1')]",
				"[concat(variables('factoryId'), '/datasets/BinarySinkFileStore')]",
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyfromDBtoParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "RecordID",
											"type": "Int32"
										},
										"sink": {
											"name": "RecordID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Lot",
											"type": "String"
										},
										"sink": {
											"name": "Lot",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ActualShipDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ActualShipDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "MainQty",
											"type": "Int32"
										},
										"sink": {
											"name": "MainQty",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ShipFixUp",
											"type": "Int32"
										},
										"sink": {
											"name": "ShipFixUp",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "fabtimshipment",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "mfgdlparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/fabtimshipment')]",
				"[concat(variables('factoryId'), '/datasets/mfgdlparquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDWSinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "AzureSynapseDLLink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().sinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseDLLink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySinkFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySourceFileStore1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "ONPREMALLUSERS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@concat(dataset().folderPath,'/',dataset().directory)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONPREMALLUSERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "inbound/site/USR/FDC/Samples",
						"fileSystem": "adls"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FDCData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "GAY11091.1-example1.dat",
						"folderPath": "inbound/site/USR/FDC/Samples",
						"fileSystem": "adls"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FDCParquetDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "inbound/site/USR/FDC/Samples",
						"fileSystem": "adls"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetMetadataDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					},
					"SourceDirectory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().SourceDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"SourceContainer": {
						"type": "string"
					},
					"SourceDirectory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().SourceDirectory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().SourceContainer",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fabtimshipment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fabtimesqlserver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblShipment"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/fabtimesqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mfgdlparquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "shipment.parquet",
						"folderPath": "inbound/user/ffyn9j",
						"fileSystem": "adls"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLSBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ADLSBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseDLLink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseDLLink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ONPREMALLUSERS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ONPREMALLUSERS_properties_typeProperties_host')]",
					"userId": "[parameters('ONPREMALLUSERS_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ONPREMALLUSERS_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeMfgDataLake",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeMfgDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ONPREMVM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "onpremvm",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ONPREMVM_properties_typeProperties_host')]",
					"userId": "[parameters('ONPREMVM_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ONPREMVM_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeMfgDataLake",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeMfgDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fabtimesqlserver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('fabtimesqlserver_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeMfgDataLake",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeMfgDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onsemidevmdlstoragelink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "linked service for ADLS",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('onsemidevmdlstoragelink_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyEvery5Mins')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyFilesfromMultipleContainers",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFileFolder": "[parameters('CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_SourceFileFolder')]",
							"SourceFileDirectory": "[parameters('CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_SourceFileDirectory')]",
							"DestinationFileFolder": "[parameters('CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileFolder')]",
							"DestinationFileDirectory": "[parameters('CopyEvery5Mins_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileDirectory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2020-05-12T21:36:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFilesfromMultipleContainers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeMfgDataLake')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "integrationRuntimeMfgDataLake",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformFDCDatToParquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FDCData",
								"type": "DatasetReference"
							},
							"name": "FDCDataFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FDCParquetDS",
								"type": "DatasetReference"
							},
							"name": "FDCtoParquet"
						}
					],
					"transformations": [
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tskipLines: 63,\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy','MM/dd/yyyy HH:mm:ss'],\n\tpreferredIntegralType: 'long',\n\tpreferredFractionalType: 'decimal') ~> FDCDataFile\nFDCDataFile derive({Time Relative (sec)} = toString(byName('Time Relative (sec)')),\n\t\t{Time Absolute (UTC)} = toString(byName('Time Absolute (UTC)')),\n\t\t{Time Absolute (Date_Time)} = toString(byName('Time Absolute (Date_Time)')),\n\t\tStep = toString(byName('Step')),\n\t\tStatus = toString(byName('Status')),\n\t\t{Tool:_SST1_chamber_2_rpm_(r/min);_SVID200} = toString(byName('Tool:_SST1_chamber_2_rpm_(r/min);_SVID200')),\n\t\t{Tool:_SST1_chmbr_2_rx_time_rem_(cs);_SVID201} = toString(byName('Tool:_SST1_chmbr_2_rx_time_rem_(cs);_SVID201')),\n\t\t{Tool:_SST1_chmbr_2_step_time_rem_(cs);_SVID202} = toString(byName('Tool:_SST1_chmbr_2_step_time_rem_(cs);_SVID202')),\n\t\t{Tool:_SST1_chmbr_2_wafers_present;_SVID205} = toString(byName('Tool:_SST1_chmbr_2_wafers_present;_SVID205')),\n\t\t{Tool:_SST1_chmbr_2_door_state;_SVID206} = toString(byName('Tool:_SST1_chmbr_2_door_state;_SVID206')),\n\t\t{Tool:_SST1_chmbr_2_processed_state;_SVID208} = toString(byName('Tool:_SST1_chmbr_2_processed_state;_SVID208')),\n\t\t{Tool:_SST1_chmbr_2_PP_Step;_SVID211_[Tool's_Step]} = toString(byName('Tool:_SST1_chmbr_2_PP_Step;_SVID211_[Tools_Step]')),\n\t\t{Tool:_SST1_chmbr_2_PP_Exec_Name;_SVID212} = toString(byName('Tool:_SST1_chmbr_2_PP_Exec_Name;_SVID212')),\n\t\t{Tool:_SST1_chmbr_2_Process_State;_SVID213} = toString(byName('Tool:_SST1_chmbr_2_Process_State;_SVID213')),\n\t\t{Tool:_SST1_chmbr_2_N2_Temperature_(degC);_SVID214} = toString(byName('Tool:_SST1_chmbr_2_N2_Temperature_(degC);_SVID214')),\n\t\t{Tool:_SST1_chmbr_2_left_vision_score;_SVID215} = toString(byName('Tool:_SST1_chmbr_2_left_vision_score;_SVID215')),\n\t\t{Tool:_SST1_chmbr_2_right_vision_score;_SVID216} = toString(byName('Tool:_SST1_chmbr_2_right_vision_score;_SVID216')),\n\t\t{Snapshot:_SST1_chmbr_2_left_vision_score;_SVID215} = toString(byName('Snapshot:_SST1_chmbr_2_left_vision_score;_SVID215')),\n\t\t{Snapshot:_SST1_chmbr_2_right_vision_score;_SVID216} = toString(byName('Snapshot:_SST1_chmbr_2_right_vision_score;_SVID216')),\n\t\tTool_Bin_Polling_Latency = toString(byName('Tool_Bin_Polling_Latency')),\n\t\tTool_Bin_Data_Age = toString(byName('Tool_Bin_Data_Age')),\n\t\tTool_Bin_Data_Age_SECS = toString(byName('Tool_Bin_Data_Age_SECS'))) ~> MapDrifted1\nMapDrifted1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['prash_example.parquet'],\n\tmapColumn(\n\t\ttime_relative_sec = {Time Relative (sec)},\n\t\ttime_absolute_utc = {Time Absolute (UTC)},\n\t\ttime_absolute_dt = {Time Absolute (Date_Time)}\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FDCtoParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FDCData')]",
				"[concat(variables('factoryId'), '/datasets/FDCParquetDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractFDCMetaData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FDCMetaData",
								"type": "DatasetReference"
							},
							"name": "FDCMetaData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FDCParquetDS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Pivot1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tfdc_metadata_key as string,\n\t\tfdc_metadata_value as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tskipLines: 3) ~> FDCMetaData\nFilter1 pivot(groupBy(fdc_metadata_key,\n\t\tfdc_metadata_value),\n\tpivotBy(fdc_metadata_key),\n\t{} = count(),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot1\nFDCMetaData filter(contains([\"General Info, Run Path and Name\" ], fdc_metadata_key)) ~> Filter1\nPivot1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FDCMetaData')]",
				"[concat(variables('factoryId'), '/datasets/FDCParquetDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FDCMetaData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onsemidevmdlstoragelink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "GAY11091.1-example1.dat",
						"folderPath": "inbound/site/USR/FDC/Samples",
						"fileSystem": "adls"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers_to_onprem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore1",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": "@pipeline().parameters.SourceFileDirectory"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteActivity",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyOneContainer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySourceFileStore1",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "@pipeline().parameters.SourceFileFolder",
												"directory": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)"
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "onsemidevmdlstoragelink",
												"type": "LinkedServiceReference"
											},
											"path": "adls/inbound/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"wildcardFileName": "*.*"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "inbound"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "staged"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "adls"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "inbound"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinarySourceFileStore1')]",
				"[concat(variables('factoryId'), '/datasets/BinarySinkFileStore')]",
				"[concat(variables('factoryId'), '/linkedServices/onsemidevmdlstoragelink')]"
			]
		}
	]
}